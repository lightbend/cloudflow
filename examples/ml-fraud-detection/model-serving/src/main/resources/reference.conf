# Default values for the configuration
# To override, create an application.conf file in the class path.

config-util-test : {
  good : {
    boolean-item: false,
    int-item:     123,
    long-item:    123456,
    double-item:  3.14,
    string-item:  "a string",
    boolean-list: [false, true],
    int-list:     [1, 2, 3],
    long-list:    [100, 200, 300],
    double-list:  [1.1, 2.2, 3.14],
    string-list:  ["one", "two", "three"]
  },

  bad-type-scalar : {
    boolean-item: 1,
    int-item:     "one", # int, long parser are very forgiving; will parse the first part of floats!
    long-item:    "long",
    double-item:  "pi",
    string-item:  [123]  # string parser is very forgiving!
  },

  bad-type-list : {
    boolean-list: [1, 2, 3],
    int-list:     ["one", "two", "three"],
    long-list:    ["one", "two", "three"],
    double-list:  ["one", "two", "three"],
    string-list:  123
  },

  not-a-scalar : {
    boolean-item: [false, true],
    int-item:     [1, 2, 3],
    long-item:    [100, 200, 300],
    double-item:  [1.1, 2.2, 3.14],
    string-item:  ["one", "two", "three"]
  },

  not-a-list : {
    boolean-list: true,
    int-list:     123,
    long-list:    123456,
    double-list:  3.14,
    string-list:  "a string"
  }

  missing-scalar : {},
  missing-list : {},

  null-scalar : {
    boolean-item: null,
    int-item:     null,
    long-item:    null,
    double-item:  null,
    string-item:  null
  }

  null-list : {
    boolean-list: null,
    int-list:     null,
    long-list:    null,
    double-list:  null,
    string-list:  null
  }

  empty-list : {
    boolean-list: [],
    int-list:     [],
    long-list:    [],
    double-list:  [],
    string-list:  []
  }
}

records-reader-test-classpath2 : {
  data-sources : {
    which-source: "CLASSPATH",
    from-classpath : {
      paths: [
        "good-records1.csv",
        "good-records2.csv"
      ]
    }
  }
}

records-reader-test-classpath : {
  data-sources : {
    which-source: "CLASSPATH",
    from-classpath : {
      paths: [
        "test/data/test-records.csv"
      ]
    },
    from-file-system : {},
    from-urls : {}
  }
}

records-reader-test-filesystem : {
  data-sources : {
    which-source: "FileSystem",
    from-classpath : {},
    from-file-system : {
      dir-paths: [
        "pipelinesx/src/test/resources/test/data"
      ],
      file-name-regex: "^.*\\.csv$",  // ... whose names match this regular expression. ("" for no filtering)
      paths: [ ]            // load this list of paths.
    },
    from-urls : {}
  }
}

records-reader-test-urls : {
  data-sources : {
    which-source: "URLs",
    from-classpath : {},
    from-file-system : {},
    from-urls : {
      base-urls: [          // Load all from these URL, ...
        "https://lightbend.com/"
      ],
      files: [               // ... combined with these files, but if empty, just use the base-urls
        "about-lightbend"
      ]
    }
  }
}

records-reader-test-without-data-sources : {}
records-reader-test-without-which-source : {
  data-sources : {}
}
records-reader-test-empty-which-source : {
  data-sources : {
    which-source: ""
  }
}
records-reader-test-invalid-which-source : {
  data-sources : {
    which-source: "foobar"
  }
}

records-reader-test-classpath-without-classpath : {
  data-sources : {
    which-source: "CLASSPATH"
  }
}
records-reader-test-classpath-with-empty-classpath : {
  data-sources : {
    which-source: "CLASSPATH",
    from-classpath : {}
  }
}
records-reader-test-classpath-with-empty-paths : {
  data-sources : {
    which-source: "CLASSPATH",
    from-classpath : {
      paths: []
    }
  }
}
records-reader-test-classpath-with-invalid-paths : {
  data-sources : {
    which-source: "CLASSPATH",
    from-classpath : {
      paths: ["foo/bar/baz", "bad/path"]
    }
  }
}

records-reader-test-filesystem-without-filesystem : {
  data-sources : {
    which-source: "FileSystem"
  }
}
records-reader-test-filesystem-with-empty-filesystem : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {}
  }
}
records-reader-test-filesystem-with-empty-paths-and-dir-paths : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {
      dir-paths: [],
      paths: []
    }
  }
}
records-reader-test-filesystem-with-nonempty-dir-paths-empty-file-name-regex : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {
      dir-paths: [
        "pipelinesx/src/test/resources/test/data"
      ],
      paths: []
    }
  }
}
records-reader-test-filesystem-with-nonempty-dir-paths-nonempty-matching-file-name-regex : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {
      dir-paths: [
        "pipelinesx/src/test/resources/test/data"
      ],
      file-name-regex: "^.*\\.csv$",
      paths: []
    }
  }
}
records-reader-test-filesystem-with-nonempty-dir-paths-nonempty-nonmatching-file-name-regex : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {
      dir-paths: [
        "pipelinesx/src/test/resources/test/data"
      ],
      file-name-regex: "^.*\\.foo.bar$",
      paths: []
    }
  }
}
records-reader-test-filesystem-with-nonempty-paths-and-dir-paths : {
  data-sources : {
    which-source: "FileSystem",
    from-file-system : {
      dir-paths: [
        "pipelinesx/src/test/resources/test/data"
      ],
      paths: [
        "pipelinesx/src/test/resources/bad-records.csv"
      ]
    }
  }
}

records-reader-test-urls-without-urls : {
  data-sources : {
    which-source: "URLs"
  }
}
records-reader-test-urls-with-empty-urls : {
  data-sources : {
    which-source: "URLs",
    from-urls : {}
  }
}
records-reader-test-urls-with-empty-base-urls : {
  data-sources : {
    which-source: "URLs",
    from-urls : {
      base-urls: [ ],
      files: [ "foobar.html" ]
    }
  }
}
records-reader-test-urls-with-empty-files : {
  data-sources : {
    which-source: "URLs",
    from-urls : {
      base-urls: [ "http://example.foo" ],
      files: [ ]
    }
  }
}
