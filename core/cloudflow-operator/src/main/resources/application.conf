cloudflow {
  platform {
    cluster-type = ${?CLUSTER_TYPE}

    release-version = "Not provided"
    release-version = ${?RELEASE_VERSION}

    pod-name = "cloudflow-operator"
    pod-name = ${?POD_NAME}

    pod-namespace = "cloudflow"
    pod-namespace = ${?POD_NAMESPACE}

    controlled-namespace = ${?CONTROLLED_NAMESPACE}

    api {
      # API version for client compatibility checks
      compatibility-version = "1"

      bind-interface = "0.0.0.0"
      bind-port = 5001
    }

    deployment {
      # Specifies the duration after which the platform will respond with a timeout
      # while waiting for k8s to respond.
      # a duration between responses from k8s (create / update / watch resources) longer than specified timeout will
      # result in the server responding with an internal server error.
      timeout = 5 minutes
      timeout = ${?DEPLOYMENT_TIMEOUT}

      # Resource limits for runner pods
      # NOTE: do not confuse 'm' with 'M' between cpu and memory.
      # NOTE: m=milli, M=mega (I know, it sounds so obvious!)
      # TODO: Settings should check that memory sizes are larger than (at least) a few MB
      # TODO: Setting memory to very low quantity will make the pod hang in container creating state (FailedCreatePodSandBox)

      akka-runner {
        requests-memory = "128M"
        requests-memory = ${?AKKA_RUNNER_REQUESTS_MEMORY}
        requests-cpu = "0.1"
        requests-cpu = ${?AKKA_RUNNER_REQUESTS_CPU}

        # limits is optional
        limits-memory = ${?AKKA_RUNNER_LIMITS_MEMORY}

        # limits is optional
        limits-cpu = ${?AKKA_RUNNER_LIMITS_CPU}

        # WORKAROUND FOR MEMORY ISSUES WITH RESIDENTIAL VS HEAP:
        # Max heap must be set to 50% of limits-memory, OpenJDK 8u191 backports JDK 10 cgroup support flags and enables
        # container support by default. The RamPercentage flags only apply to JVM heap.
        #   -XX:+UseContainerSupport
        #   -XX:InitialRAMPercentage
        #   -XX:MaxRAMPercentage
        #   -XX:MinRAMPercentage
        # https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html
        #
        # Java NIO types will cache in a thread local map BufferCache entry that contains DirectByteBuffer references
        # (off-heap allocations). The caches are unconstrained by default. The -Djdk.nio.maxCachedBufferSize=1048576
        # system property will set a 1MB buffer per thread.
        # https://bugs.openjdk.java.net/browse/JDK-8147468
        java-opts = "-XX:MaxRAMPercentage=50.0 -Djdk.nio.maxCachedBufferSize=1048576"

        java-opts = ${?AKKA_RUNNER_JAVA_OPTS}
      }
    }
  }
}

akka.http.client.idle-timeout = infinite
akka.http.client.parsing.max-content-length = infinite
akka.http.client.parsing.max-to-strict-bytes = 256m
akka.http.client.parsing.max-chunk-size = 16m
akka.http.host-connection-pool.client.parsing.max-content-length = infinite
akka.http.host-connection-pool.client.parsing.max-to-strict-bytes = 256m
akka.http.host-connection-pool.response-entity-subscription-timeout = 60 seconds
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

skuber {
  watch-continuously {
    # Timeout that is passed to the kubernetes cluster for all list/watch calls. This limits the duration of the call,
    # regardless of any activity or inactivity.
    request-timeout = 1 minute

    # The idle timeout for the connection before if closes due to inactivity. The idle-timeout must be a great value
    # than that used for timeout-seconds.
    idle-timeout = 5 minutes

    # The idle timeout for the connection pool used by the Watch Source (each source has its own connection pool).
    # When the pool is no longer used by the source and the idle time has been exceeded the pool will shutdown and
    # reclaim the unused resources.
    pool-idle-timeout = 5 minutes
  }
}
